{"version":3,"sources":["util/pinata.js","util/interact.js","Minter.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","contractABI","contractAddress","web3","createAlchemyWeb3","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","rel","getCurrentWalletConnected","length","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","mintNFT","url","name","description","trim","metadata","image","position","location","latitude","coords","longitude","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","init","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","style","color","Pin","size","src","alt","height","viewBox","cursor","transform","Map","zoom","viewport","setViewport","tokens","setTokens","mapRef","useRef","tokenId","alchemy","getNftMetadata","push","handleViewportChange","useCallback","newViewport","ref","width","mapStyle","onViewportChange","mapboxApiAccessToken","map","token","index","App","path","element","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.55dd01d3.chunk.js","sourcesContent":["require(\"dotenv\").config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\nconst axios = require(\"axios\");\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n","import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nexport const web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a\n              target=\"_blank\"\n              href={`https://metamask.io/download.html`}\n              rel=\"noreferrer\"\n            >\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a\n              target=\"_blank\"\n              href={`https://metamask.io/download.html`}\n              rel=\"noreferrer\"\n            >\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nasync function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nfunction getPosition(options) {\n  return new Promise((resolve, reject) =>\n    navigator.geolocation.getCurrentPosition(resolve, reject, options)\n  );\n}\n\nexport const mintNFT = async (url, name, description) => {\n  if (url.trim() === \"\" || name.trim() === \"\" || description.trim() === \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    };\n  }\n\n  //make metadata\n  const metadata = {};\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n  const position = await getPosition();\n  metadata.location = {\n    latitude: position.coords.latitude,\n    longitude: position.coords.longitude,\n  };\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n};\n","import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./util/interact.js\";\nimport { Link } from \"react-router-dom\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n  useEffect(() => {\n    async function init() {\n      const { address, status } = await getCurrentWalletConnected();\n\n      setWallet(address);\n      setStatus(status);\n\n      addWalletListener();\n    }\n\n    init();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://metamask.io/download.html`}\n            rel=\"noreferrer\"\n          >\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { success, status } = await mintNFT(url, name, description);\n    setStatus(status);\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n    }\n  };\n\n  return (\n    <div className=\"Minter\">\n      <Link to=\"/map\">\n        <button id=\"nftButton\">NFT Map</button>\n      </Link>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\" style={{ color: \"red\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\nimport { web3 } from \"./util/interact\";\n\nconst Pin = (props) => {\n  const { size = 50, onClick, image } = props;\n\n  return (\n    <img\n      src={image}\n      alt=\"Pin\"\n      height={size}\n      viewBox=\"0 0 24 24\"\n      style={{\n        cursor: \"pointer\",\n        transform: `translate(${-size / 2}px,${-size}px)`,\n      }}\n      onClick={onClick}\n    />\n  );\n};\n\nconst Map = (props) => {\n  const [viewport, setViewport] = useState({\n    latitude: 38.8298,\n    longitude: -77.3074,\n    zoom: 8,\n  });\n\n  const [tokens, setTokens] = useState([]);\n  const mapRef = useRef();\n\n  // fetch all of the NFTs from the contract with location metadata\n  useEffect(() => {\n    async function init() {\n      const tokens = [];\n      let tokenId = 3669;\n      let response;\n      do {\n        response = await web3.alchemy.getNftMetadata({\n          contractAddress: \"0x4c4a07f737bf57f6632b6cab089b78f62385acae\",\n          tokenId: tokenId++,\n        });\n        if (response.metadata.location) {\n          tokens.push(response.metadata);\n        }\n      } while (!response.error);\n\n      setTokens(tokens);\n    }\n    init();\n  }, []);\n\n  const handleViewportChange = useCallback(\n    (newViewport) => setViewport(newViewport),\n    []\n  );\n\n  return (\n    <div style={{ height: \"100vh\" }}>\n      <ReactMapGL\n        {...viewport}\n        ref={mapRef}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        onViewportChange={handleViewportChange}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n      >\n        {tokens.map((token, index) => (\n          <Marker\n            key={index}\n            latitude={token.location.latitude}\n            longitude={token.location.longitude}\n          >\n            <Pin image={token.image} />\n          </Marker>\n        ))}\n      </ReactMapGL>\n    </div>\n  );\n};\n\nexport default Map;\n","import \"./App.css\";\nimport Minter from \"./Minter\";\nimport Map from \"./Map\";\nimport { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/map\" element={<Map />} />\n        <Route exact path=\"\" element={<Minter />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={`/${process.env.PUBLIC_URL}`}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}